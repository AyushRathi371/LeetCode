class Solution {
    public int countPairs(int[] arr,int low ,int mid,int high){
        int cnt =0;
        int right= mid+1;
        int left = low;
        for(int i=left;i<=mid;i++){
            while( right<=high&& (long)arr[i]>2L*arr[right]){
                right++;
            }
            cnt +=right-(mid+1);
        }
        return cnt;
    }
    public void merge(int[] arr, int low ,int mid,int high){
        int left= low;
        int right = mid+1;
        ArrayList<Integer> list= new ArrayList<>();
        while(left<=mid && right<=high){
            if(arr[left]<= arr[right]){
                list.add(arr[left]);
                left++;
            }else{
                list.add(arr[right]);
                right++;
            }
        }
        while(left<=mid){
            list.add(arr[left]);
            left++;
        }
        while(right <=high){
            list.add(arr[right]);
            right++;
        }

        for(int i =low;i<=high;i++){
            arr[i]=list.get(i-low);
        }
    }
    public int mergeSort(int[] arr,int low, int high){
        int cnt=0;
        if(low >= high) return cnt;
        int mid = (low+high)/2;
        
        cnt +=mergeSort(arr,low,mid);
        cnt +=mergeSort(arr,mid+1,high);
        cnt +=countPairs(arr,low,mid,high);
        merge(arr,low,mid,high);
        return cnt;

    }
    public int reversePairs(int[] nums) {
        int  n = nums.length;
        return mergeSort(nums,0,n-1);
    }
}
